version: '3.8'

services:
  # Backend API Server
  server:
    build:
      context: .
      dockerfile: server/Dockerfile
    ports:
      - "5000:5000"
    environment:
      - NODE_ENV=development
      - PORT=5000
      - DATABASE_URL=file:/app/data/database.db
      - FRONTEND_URL=http://localhost:3000
      - WEBSOCKET_PORT=5000
    volumes:
      - sqlite_data:/app/data
      - ./server:/app/server:ro
      - ./shared:/app/shared:ro
    networks:
      - app-network
    restart: unless-stopped
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:5000/api/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend Client
  client:
    build:
      context: .
      dockerfile: client/Dockerfile
    ports:
      - "3000:80"
    environment:
      - VITE_API_URL=http://localhost:5000
      - VITE_WS_URL=ws://localhost:5000
    networks:
      - app-network
    restart: unless-stopped
    depends_on:
      - server
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for session management (optional)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    networks:
      - app-network
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

networks:
  app-network:
    driver: bridge

volumes:
  sqlite_data:
    driver: local
  redis_data:
    driver: local